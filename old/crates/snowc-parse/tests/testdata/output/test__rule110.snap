---
source: crates/snowc-parse/tests/test.rs
expression: snapshot_parsing(contents)
---
-- create a grid of size
create_grid :: Int -> Int -> Array;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"create_grid" :: "\"\\\"Int\\\" -> \\\"Int\\\"\" -> \"Array\"">

create_grid size char =
  if 0 < (size - 1)
  then (push (create_grid (size - 1) char) char)
  else [char];
            ^^^^ "size"
                 ^^^^ "char"
     ^ 0
          ^^^^ "size"
                 ^ 1
          ^^^^^^ (- "size" 1)
     ^^^ (< 0 (- "size" 1))
        ^^^^ "push"
              ^^^^^^^^^^^ "create_grid"
                           ^^^^ "size"
                                  ^ 1
                           ^^^^^^ (- "size" 1)
                                     ^^^^ "char"
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"create_grid": ((- "size" 1), "char")>
                                           ^^^^ "char"
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"push": (<"create_grid": ((- "size" 1), "char")>, "char")>
        ^^^^ "char"
        ^^^^ ["char"]
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((< 0 (- "size" 1))) then <"push": (<"create_grid": ((- "size" 1), "char")>, "char")> else ["char"])
   (\"char" -> (if ((< 0 (- "size" 1))) then <"push": (<"create_grid": ((- "size" 1), "char")>, "char")> else ["char"]))
   (\"size" -> (\"char" -> (if ((< 0 (- "size" 1))) then <"push": (<"create_grid": ((- "size" 1), "char")>, "char")> else ["char"])))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"create_grid": (\"size" -> (\"char" -> (if ((< 0 (- "size" 1))) then <"push": (<"create_grid": ((- "size" 1), "char")>, "char")> else ["char"])))>


-- 111   110   101   100   011   010   001   000
--  0     1     1     0     1     1     1     0
is_alive :: Str -> Str -> Str -> Bool;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"is_alive" :: "\"\\\"\\\\\\\"Str\\\\\\\" -> \\\\\\\"Str\\\\\\\"\\\" -> \\\"Str\\\"\" -> \"Bool\"">

is_alive a b c =
  if      a == "#"
    and   b == "#"
    and   c == "#"
  then false
  else if a == "#"
    and   b == "#"
    and   c == " "
  then true
  else if a == "#"
    and   b == " "
    and   c == "#"
  then true
  else if a == "#"
    and   b == " "
    and   c == " "
  then false
  else if a == " "
    and   b == "#"
    and   c == "#"
  then true
  else if a == " "
    and   b == "#"
    and   c == " "
  then true
  else if a == " "
    and   b == " "
    and   c == "#"
  then true
  else false;
         ^ "a"
           ^ "b"
             ^ "c"
          ^ "a"
               ^^^ "#"
          ^^^^ (== "a" "#")
          ^ "b"
               ^^^ "#"
          ^^^^ (== "b" "#")
          ^^^^^^^^^^^^^^^^ (and (== "a" "#") (== "b" "#"))
          ^ "c"
               ^^^ "#"
          ^^^^ (== "c" "#")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" "#") (== "b" "#")) (== "c" "#"))
       ^^^^^ false
          ^ "a"
               ^^^ "#"
          ^^^^ (== "a" "#")
          ^ "b"
               ^^^ "#"
          ^^^^ (== "b" "#")
          ^^^^^^^^^^^^^^^^ (and (== "a" "#") (== "b" "#"))
          ^ "c"
               ^^^ " "
          ^^^^ (== "c" " ")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" "#") (== "b" "#")) (== "c" " "))
       ^^^^ true
          ^ "a"
               ^^^ "#"
          ^^^^ (== "a" "#")
          ^ "b"
               ^^^ " "
          ^^^^ (== "b" " ")
          ^^^^^^^^^^^^^^^^ (and (== "a" "#") (== "b" " "))
          ^ "c"
               ^^^ "#"
          ^^^^ (== "c" "#")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" "#") (== "b" " ")) (== "c" "#"))
       ^^^^ true
          ^ "a"
               ^^^ "#"
          ^^^^ (== "a" "#")
          ^ "b"
               ^^^ " "
          ^^^^ (== "b" " ")
          ^^^^^^^^^^^^^^^^ (and (== "a" "#") (== "b" " "))
          ^ "c"
               ^^^ " "
          ^^^^ (== "c" " ")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" "#") (== "b" " ")) (== "c" " "))
       ^^^^^ false
          ^ "a"
               ^^^ " "
          ^^^^ (== "a" " ")
          ^ "b"
               ^^^ "#"
          ^^^^ (== "b" "#")
          ^^^^^^^^^^^^^^^^ (and (== "a" " ") (== "b" "#"))
          ^ "c"
               ^^^ "#"
          ^^^^ (== "c" "#")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" " ") (== "b" "#")) (== "c" "#"))
       ^^^^ true
          ^ "a"
               ^^^ " "
          ^^^^ (== "a" " ")
          ^ "b"
               ^^^ "#"
          ^^^^ (== "b" "#")
          ^^^^^^^^^^^^^^^^ (and (== "a" " ") (== "b" "#"))
          ^ "c"
               ^^^ " "
          ^^^^ (== "c" " ")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" " ") (== "b" "#")) (== "c" " "))
       ^^^^ true
          ^ "a"
               ^^^ " "
          ^^^^ (== "a" " ")
          ^ "b"
               ^^^ " "
          ^^^^ (== "b" " ")
          ^^^^^^^^^^^^^^^^ (and (== "a" " ") (== "b" " "))
          ^ "c"
               ^^^ "#"
          ^^^^ (== "c" "#")
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (and (and (== "a" " ") (== "b" " ")) (== "c" "#"))
       ^^^^ true
       ^^^^^ false
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false)))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false)))))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))))))
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((and (and (== "a" "#") (== "b" "#")) (== "c" "#"))) then false else (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false)))))))
   (\"c" -> (if ((and (and (== "a" "#") (== "b" "#")) (== "c" "#"))) then false else (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))))))))
   (\"b" -> (\"c" -> (if ((and (and (== "a" "#") (== "b" "#")) (== "c" "#"))) then false else (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false)))))))))
   (\"a" -> (\"b" -> (\"c" -> (if ((and (and (== "a" "#") (== "b" "#")) (== "c" "#"))) then false else (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))))))))))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"is_alive": (\"a" -> (\"b" -> (\"c" -> (if ((and (and (== "a" "#") (== "b" "#")) (== "c" "#"))) then false else (if ((and (and (== "a" "#") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" "#"))) then true else (if ((and (and (== "a" "#") (== "b" " ")) (== "c" " "))) then false else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" "#"))) then true else (if ((and (and (== "a" " ") (== "b" "#")) (== "c" " "))) then true else (if ((and (and (== "a" " ") (== "b" " ")) (== "c" "#"))) then true else false))))))))))>


idx_of :: Int -> Int -> Int;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"idx_of" :: "\"\\\"Int\\\" -> \\\"Int\\\"\" -> \"Int\"">

idx_of i len = (i + len) mod len;
       ^ "i"
         ^^^ "len"
                ^ "i"
                    ^^^ "len"
                ^^^ (+ "i" "len")
                             ^^^ "len"
                ^^^^^^^^^^^^ (mod (+ "i" "len") "len")
                 (\"len" -> (mod (+ "i" "len") "len"))
                 (\"i" -> (\"len" -> (mod (+ "i" "len") "len")))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"idx_of": (\"i" -> (\"len" -> (mod (+ "i" "len") "len")))>

-- idx_of = (\i -> (\len -> (i + len) mod len));
-- ((i - 1) + len) % len

next_cell :: Array -> Int -> Bool;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"next_cell" :: "\"\\\"Array\\\" -> \\\"Int\\\"\" -> \"Bool\"">

next_cell grid x =
-- let len = length grid in
-- let a = nth grid (idx_of (x - 1) len) in
-- let b = nth grid x in
-- let c = nth grid (idx_of (x + 1) len) in
-- is_alive a b c
  (λlen ->
  (λa   ->
  (λb   ->
  (λc   -> is_alive a b c)
  (nth grid (idx_of (x - 1) len)))
  (nth grid x))
  (nth grid (idx_of (x + 1) len)))
  (length grid);
          ^^^^ "grid"
               ^ "x"
     ^^^ "len"
     ^ "a"
     ^ "b"
     ^ "c"
            ^^^^^^^^ "is_alive"
                     ^ "a"
                       ^ "b"
                         ^ "c"
            ^^^^^^^^^^^^^^^ <"is_alive": ("a", "b", "c")>
     ^^^^^^^^^^^^^^^^^^^^^^ (\"c" -> <"is_alive": ("a", "b", "c")>)
   ^^^ "nth"
       ^^^^ "grid"
             ^^^^^^ "idx_of"
                     ^ "x"
                         ^ 1
                     ^^^ (- "x" 1)
                            ^^^ "len"
             ^^^^^^^^^^^^^^^^^^^ <"idx_of": ((- "x" 1), "len")>
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>)
   ^^^ "nth"
       ^^^^ "grid"
            ^ "x"
   ^^^^^^^^^^^ <"nth": ("grid", "x")>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>)
   ^^^ "nth"
       ^^^^ "grid"
             ^^^^^^ "idx_of"
                     ^ "x"
                         ^ 1
                     ^^^ (+ "x" 1)
                            ^^^ "len"
             ^^^^^^^^^^^^^^^^^^^ <"idx_of": ((+ "x" 1), "len")>
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (\"len" -> <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>)
   ^^^^^^ "length"
          ^^^^ "grid"
   ^^^^^^^^^^^^ <"length": ("grid")>
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"len" -> <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>): (<"length": ("grid")>)>
      (\"x" -> <(\"len" -> <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>): (<"length": ("grid")>)>)
      (\"grid" -> (\"x" -> <(\"len" -> <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>): (<"length": ("grid")>)>))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"next_cell": (\"grid" -> (\"x" -> <(\"len" -> <(\"a" -> <(\"b" -> <(\"c" -> <"is_alive": ("a", "b", "c")>): (<"nth": ("grid", <"idx_of": ((- "x" 1), "len")>)>)>): (<"nth": ("grid", "x")>)>): (<"nth": ("grid", <"idx_of": ((+ "x" 1), "len")>)>)>): (<"length": ("grid")>)>))>


cell_type :: Array -> Int -> Str;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"cell_type" :: "\"\\\"Array\\\" -> \\\"Int\\\"\" -> \"Str\"">

cell_type grid idx =
  if (next_cell grid idx)
  then "#"
  else " ";
          ^^^^ "grid"
               ^^^ "idx"
      ^^^^^^^^^ "next_cell"
                ^^^^ "grid"
                     ^^^ "idx"
      ^^^^^^^^^^^^^^^^^^^ <"next_cell": ("grid", "idx")>
       ^^^ "#"
       ^^^ " "
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if (<"next_cell": ("grid", "idx")>) then "#" else " ")
   (\"idx" -> (if (<"next_cell": ("grid", "idx")>) then "#" else " "))
   (\"grid" -> (\"idx" -> (if (<"next_cell": ("grid", "idx")>) then "#" else " ")))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"cell_type": (\"grid" -> (\"idx" -> (if (<"next_cell": ("grid", "idx")>) then "#" else " ")))>


next_gen :: Array -> Int -> Array;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"next_gen" :: "\"\\\"Array\\\" -> \\\"Int\\\"\" -> \"Array\"">

next_gen grid idx =
  if (idx + 1) < (length grid)
  then (push (next_gen grid (idx + 1)) (cell_type grid idx))
  else [cell_type grid idx];
         ^^^^ "grid"
              ^^^ "idx"
      ^^^ "idx"
            ^ 1
      ^^^^^ (+ "idx" 1)
                  ^^^^^^ "length"
                         ^^^^ "grid"
                  ^^^^^^^^^^^^ <"length": ("grid")>
      ^^^^^^^^^^ (< (+ "idx" 1) <"length": ("grid")>)
        ^^^^ "push"
              ^^^^^^^^ "next_gen"
                       ^^^^ "grid"
                             ^^^ "idx"
                                   ^ 1
                             ^^^^^ (+ "idx" 1)
              ^^^^^^^^^^^^^^^^^^^^^^^^ <"next_gen": ("grid", (+ "idx" 1))>
                                        ^^^^^^^^^ "cell_type"
                                                  ^^^^ "grid"
                                                       ^^^ "idx"
                                        ^^^^^^^^^^^^^^^^^^^ <"cell_type": ("grid", "idx")>
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"push": (<"next_gen": ("grid", (+ "idx" 1))>, <"cell_type": ("grid", "idx")>)>
        ^^^^^^^^^ "cell_type"
                  ^^^^ "grid"
                       ^^^ "idx"
        ^^^^^^^^^^^^^^^^^^^ <"cell_type": ("grid", "idx")>
        ^^^^^^^^^^^^^^^^^^^ [<"cell_type": ("grid", "idx")>]
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (if ((< (+ "idx" 1) <"length": ("grid")>)) then <"push": (<"next_gen": ("grid", (+ "idx" 1))>, <"cell_type": ("grid", "idx")>)> else [<"cell_type": ("grid", "idx")>])
   (\"idx" -> (if ((< (+ "idx" 1) <"length": ("grid")>)) then <"push": (<"next_gen": ("grid", (+ "idx" 1))>, <"cell_type": ("grid", "idx")>)> else [<"cell_type": ("grid", "idx")>]))
   (\"grid" -> (\"idx" -> (if ((< (+ "idx" 1) <"length": ("grid")>)) then <"push": (<"next_gen": ("grid", (+ "idx" 1))>, <"cell_type": ("grid", "idx")>)> else [<"cell_type": ("grid", "idx")>])))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"next_gen": (\"grid" -> (\"idx" -> (if ((< (+ "idx" 1) <"length": ("grid")>)) then <"push": (<"next_gen": ("grid", (+ "idx" 1))>, <"cell_type": ("grid", "idx")>)> else [<"cell_type": ("grid", "idx")>])))>


display :: IO;
^^^^^^^^^^^^^^ <"display" :: "IO">

display grid = print grid "\n";
        ^^^^ "grid"
               ^^^^^ "print"
                     ^^^^ "grid"
                          ^^^^ "\n"
               ^^^^^^^^^^^^^^^^ <"print": ("grid", "\n")>
                (\"grid" -> <"print": ("grid", "\n")>)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"display": (\"grid" -> <"print": ("grid", "\n")>)>


run :: Array -> Array;
^^^^^^^^^^^^^^^^^^^^^^ <"run" :: "\"Array\" -> \"Array\"">

run grid = run (next_gen (display grid) 0);
    ^^^^ "grid"
           ^^^ "run"
                ^^^^^^^^ "next_gen"
                          ^^^^^^^ "display"
                                  ^^^^ "grid"
                          ^^^^^^^^^^^^^ <"display": ("grid")>
                                        ^ 0
                ^^^^^^^^^^^^^^^^^^^^^^^^^^ <"next_gen": (<"display": ("grid")>, 0)>
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"run": (<"next_gen": (<"display": ("grid")>, 0)>)>
            (\"grid" -> <"run": (<"next_gen": (<"display": ("grid")>, 0)>)>)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"run": (\"grid" -> <"run": (<"next_gen": (<"display": ("grid")>, 0)>)>)>


main = IO;
       ^^ "IO"
^^^^^^^^^^ <"main": "IO">

main =
  -- let start = create_grid 9 " " in
  -- let starting_grid = push start "#" in
  -- let grid = display starting_grid in
  -- display <| next_gen grid 0;
  (\starting_grid ->
  (\grid -> run grid)
  (display starting_grid))
  (push  (create_grid 90 " ") "#");
    ^^^^^^^^^^^^^ "starting_grid"
    ^^^^ "grid"
            ^^^ "run"
                ^^^^ "grid"
            ^^^^^^^^^ <"run": ("grid")>
    ^^^^^^^^^^^^^^^^^ (\"grid" -> <"run": ("grid")>)
   ^^^^^^^ "display"
           ^^^^^^^^^^^^^ "starting_grid"
   ^^^^^^^^^^^^^^^^^^^^^^ <"display": ("starting_grid")>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"grid" -> <"run": ("grid")>): (<"display": ("starting_grid")>)>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (\"starting_grid" -> <(\"grid" -> <"run": ("grid")>): (<"display": ("starting_grid")>)>)
   ^^^^ "push"
          ^^^^^^^^^^^ "create_grid"
                      ^^ 90
                         ^^^ " "
          ^^^^^^^^^^^^^^^^^^^ <"create_grid": (90, " ")>
                              ^^^ "#"
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"push": (<"create_grid": (90, " ")>, "#")>
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <(\"starting_grid" -> <(\"grid" -> <"run": ("grid")>): (<"display": ("starting_grid")>)>): (<"push": (<"create_grid": (90, " ")>, "#")>)>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <"main": <(\"starting_grid" -> <(\"grid" -> <"run": ("grid")>): (<"display": ("starting_grid")>)>): (<"push": (<"create_grid": (90, " ")>, "#")>)>>

-- TODO: Check for function arg length ERROR.

