-- create a grid of size
create_grid :: Int -> Int -> Array
create_grid size char =
  if 0 < (size - 1)
  then (push (create_grid (size - 1) char) char)
  else [char]

-- 111   110   101   100   011   010   001   000
--  0     1     1     0     1     1     1     0
is_alive :: Str -> Str -> Str -> Bool
is_alive a b c =
  if      a == "#"
    and   b == "#"
    and   c == "#"
  then false
  else if a == "#"
    and   b == "#"
    and   c == " "
  then true
  else if a == "#"
    and   b == " "
    and   c == "#"
  then true
  else if a == "#"
    and   b == " "
    and   c == " "
  then false
  else if a == " "
    and   b == "#"
    and   c == "#"
  then true
  else if a == " "
    and   b == "#"
    and   c == " "
  then true
  else if a == " "
    and   b == " "
    and   c == "#"
  then true
  else false

idx_of :: Int -> Int -> Int
idx_of i len = (i + len) mod len
-- idx_of = (\i -> (\len -> (i + len) mod len))
-- ((i - 1) + len) % len

next_cell :: Array -> Int -> Bool
next_cell grid x =
-- let len = length grid in
-- let a = nth grid (idx_of (x - 1) len) in
-- let b = nth grid x in
-- let c = nth grid (idx_of (x + 1) len) in
-- is_alive a b c
  (位len ->
  (位a   ->
  (位b   ->
  (位c   -> is_alive a b c)
  (nth grid (idx_of (x - 1) len)))
  (nth grid x))
  (nth grid (idx_of (x + 1) len)))
  (length grid)

cell_type :: Array -> Int -> Str
cell_type grid idx =
  if (next_cell grid idx)
  then "#"
  else " "

next_gen :: Array -> Int -> Array
next_gen grid idx =
  if (idx + 1) < (length grid)
  then (push (next_gen grid (idx + 1)) (cell_type grid idx))
  else [cell_type grid idx]

str_join :: Str -> Array -> Str
str_join sep arr =
  if (length arr) > 0
  then (str_join sep (tail arr)) + (sep + (head arr))
  else ""

display :: Array -> IO
display grid = head [grid, (print (str_join "" grid) "\n")]

run :: Array -> Array
run grid = run (next_gen (display grid) 0)

main = IO
main =
  -- let start = create_grid 9 " " in
  -- let starting_grid = push start "#" in
  -- let grid = display starting_grid in
  -- display <| next_gen grid 0
  (\starting_grid ->
  (\grid -> run grid)
  (display starting_grid))
  (push  (create_grid 90 " ") "#")
-- TODO: Check for function arg length ERROR.
