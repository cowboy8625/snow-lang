-- create a grid of size
create_grid :: Int -> Int -> Array;
create_grid size char =
  if 0 < (size - 1) then
    (push (create_grid (size - 1) char) char)
  else
    [char];

-- 111   110   101   100   011   010   001   000
--  0     1     1     0     1     1     1     0
is_alive :: Str -> Str -> Str -> Bool;
is_alive a b c =
  if a == "#" and b == "#" and c == "#" then
    false
  else if a == "#" and b == "#" and c == " " then
    true
  else if a == "#" and b == " " and c == "#" then
    true
  else if a == "#" and b == " " and c == " " then
    false
  else if a == " " and b == "#" and c == "#" then
    true
  else if a == " " and b == "#" and c == " " then
    true
  else if a == " " and b == " " and c == "#" then
    true
  else
    false;

idx_of i len = (i + len) mod len;
-- ((i - 1) + len) % len

next_cell grid x =
-- let len = length grid in
-- let a = nth grid (idx_of (x - 1) len) in
-- let b = nth grid x in
-- let c = nth grid (idx_of (x + 1) len) in
-- is_alive a b c
  (位len ->
  (位a   ->
  (位b   ->
  (位c   -> is_alive a b c)
  (nth grid (idx_of (x - 1) len)))
  (nth grid x))
  (nth grid (idx_of (x + 1) len)))
  (length grid);

next_gen :: Array -> Array;
next_gen grid idx =
  if idx < (length grid) then
    push (next_gen grid (idx + 1)) (if (next_cell grid idx) then "#" else " ")
  else
    push [] (if (next_cell grid idx) then "#" else " ")
  ;

main = IO;
main = (\grid ->( print (next_gen (print grid "\n") 0)))
       (push (create_grid 9 " ") "#");

