-- enum Option a = Some a | None
-- Option.map f = match self on
--   | Some x -> Some (f x)
--   | None -> None

-- enum Bool = True | False

-- `==` :> a -> a -> Bool
-- `==` x y = core::equal x y Bool::True Bool::False

-- `<=` :> a -> a -> Bool
-- `<=` x y = core::less_equal x y Bool::True Bool::False

-- `>=` :> a -> a -> Bool
-- `>=` x y = core::greater_equal x y Bool::True Bool::False

-- `>` :> a -> a -> Bool
-- `>` x y = core::greater x y Bool::True Bool::False

-- `<` :> a -> a -> Bool
-- `<` x y = core::less x y Bool::True Bool::False

max x y
  : Int -> Int -> Int
  = if x > y then x else y

min x y
 : Int -> Int -> Int
 = if x < y then x else y

clamp input low high
  : Int -> Int -> Int -> Int
  = max low (min input high)

is_digit c
  : Char -> Bool
  = c >= '0' && c <= '9'
