enum Option a = Some a | None
Option.map f = match self on
  | Some x -> Some (f x)
  | None -> None

enum Bool = True | False

max :> Int -> Int -> Int
max x y = if x > y then x else y

min :> Int -> Int -> Int
min x y = if x < y then x else y

clamp :> Int -> Int -> Int -> Int
clamp input low high = max low (min input high)

is_digit :> Char -> Bool
is_digit c = c >= '0' && c <= '9'

`==` :> a -> a -> Bool
`==` x y = core::equal x y Bool::True Bool::False

`<=` :> a -> a -> Bool
`<=` x y = core::less_equal x y Bool::True Bool::False

`>=` :> a -> a -> Bool
`>=` x y = core::greater_equal x y Bool::True Bool::False

`>` :> a -> a -> Bool
`>` x y = core::greater x y Bool::True Bool::False

`<` :> a -> a -> Bool
`<` x y = core::less x y Bool::True Bool::False
