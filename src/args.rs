use super::{
    error::{Error, Result},
    position::Span,
};
use clap::{crate_description, crate_name, crate_version, Arg, Command};
pub fn snow_source_file(filename: &str) -> Result<String> {
    if filename.ends_with(".snow") {
        match std::fs::read_to_string(filename) {
            Ok(file) => Ok(file),
            Err(e) => Err(Error {
                last: None,
                msg: e.to_string(),
                span: Span::default(),
            }),
        }
    } else {
        Err(Error {
            last: None,
            msg: format!("'{}' is not `snow` source file", filename),
            span: Span::default(),
        })
    }
}

#[derive(Debug, Clone)]
pub struct UserSettings {
    pub filenames: Vec<String>,
    pub tokens: bool,
    pub ast: bool,
}

// Command Line Arguments
pub fn cargs() -> UserSettings {
    let matches = Command::new(crate_name!())
        .version(crate_version!())
        .author("cowboy8625")
        .about(crate_description!())
        .arg(
            Arg::new("tokens")
                .short('t')
                .long("tokens")
                .help("Display tokens generated by compiler")
                .action(clap::ArgAction::SetTrue)
                .takes_value(false),
        )
        .arg(
            Arg::new("ast")
                .short('a')
                .long("ast")
                .help("Display ast tree generated by compiler")
                .action(clap::ArgAction::SetTrue)
                .takes_value(false),
        )
        .arg(
            Arg::new("files")
                .multiple_occurrences(true)
                .value_name("FILES"),
        )
        .get_matches();

    let tokens = matches
        .get_one::<bool>("tokens")
        .expect("filed to convert flag token into bool");
    let ast = matches
        .get_one::<bool>("ast")
        .expect("failed to convert flag ast into bool");
    let filenames: Vec<String> = matches
        .get_many("files")
        .expect("files are expected")
        .cloned()
        .collect();

    UserSettings {
        filenames,
        tokens: *tokens,
        ast: *ast,
    }
}
